
<!DOCTYPE html>
<html lang="en" data-notes="example_notes.htm" data-synchronize="/templates/slides/slides.php">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" title="mainsheet" href="dewdrop/template.css">
	<link rel="alternate stylesheet" title="outlinesheet" href="dewdrop/template_outline.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
	<script src="slides.js"></script>
	<script>
		initialize({
			"title": "Slides.js",
			"subtitle": "Example and slideshow",
			"authors": "François Hissel",
			"description": "Slides.js reference slideshow"
		});
	</script>
<style>
body>section div .code-sample, #thumblayer>div.wthumb>section div .code-sample { overflow: auto auto; }
body>section pre, #thumblayer>div.wthumb>section pre { 
	margin: 0px;
	tab-size: 2;
}
body>section code, #thumblayer>div.wthumb>section code { 
	background-color: #f3f3f3;
	font-size: 0.7em;
	text-wrap: wrap;
}
key {
	display: inline-block;
	min-width: 1.5em;
	min-height: 1.5em;
	line-height: 1.5em;
	padding: 0.1em;
	text-align: center;
	vertical-align: middle;
	border: 1px solid black;
	background-color: #f3f3f3ff;
	box-shadow: 0.3vw 0.2vh 0.2vmax rgba(0,0,0,0.5);
}
#autofragments-elements ul > li {
	--autofragment: "{'before':['semivisible'],'current':['pulse'],'animation':'fragment_cssanim'}";
}
</style>
</head>
<body>
	<svg viewBox="0 0 1 1" width="0" height="0">
		<mask id="tempmask" maskContentUnits="objectBoundingBox"></mask>
		<mask id="tempmaskb" maskContentUnits="objectBoundingBox"></mask>
	</svg>
	
	<h2 data-short="Slides.js">What is Slides.js ?</h2>

	<section id="nutshell" class="content"> 
		<h1>Design guidelines</h1>
		<div class="content">
			<ul>
				<li>Lightweight: relies only on pure HTML, CSS, Ecmascript, with no third-party library</li>
				<li>Adaptive elements to support all screen ratios, and always use the full viewport</li>
				<li>Support convenient features: presenter screen, automatic synchronization of audience devices, outline view,…</li>
				<li>Designed to enforce the use of predefined templates, including color themes</li>
				<li>Enforce a strong separation between content and style: it is usually not needed to include any style attribute in the HTML code</li>
				<li>Make it easy to create custom templates, using only CSS (or Sass), even for animations, transitions, dynamic components</li>
				<li>Make it easy to develop new components and animations, in a few lines of Javascript</li>
				<li>Heavily inspired by the wonderful <a href="https://touying-typ.github.io/">Typst Touying package</a>.</li>
			</ul>
			<p>See the <a class="view-source">source</a> of this web page to get an example.</p>
		</div>
	</section>

	<section class="content"> 
		<h1>Main features</h1>
		<div class="content">
			<ul>
				<li>Automatic sizing of slides based on screen dimensions</li>
				<li>Overview of slides</li>
				<li>Presenter notes</li>
				<li>Export slides to PDF, and view a paged document with the content of the slideshow</li>
				<li>Automatic synchronization of other viewers based on the presenter current slide</li>
				<li>Transitions between slides</li>
				<li>Animations of fragments inside slides</li>
				<li>Dynamic components inside slides that may be added through CSS only, such as a Beamer-inspired clickable mini-table of contents in the header</li>
				<li>Background and foreground layers which stay in place during the whole slideshow and are not impacted by transitions</li>
				<li>Automatic generation of outline slides</li>
				<li>Keyboard shortcut to other parts of the presentation</li>
				<li>Templates can easily be created with only bare CSS</li>
			</ul>
		</div>
	</section>

	<section class="content"> 
		<h1>This is the source of this slideshow</h1>
		<div class="content">
			<div class="code-sample" data-language="html" style="height: 60vh">
			</div>
		</div>
	</section>

	<h2 data-short="Slideshow">The slideshow structure</h2>

	<h3>The general configuration</h3>

	<section class="content">
		<h1>Initialize the slideshow</h1>
		<div class="content">
			<div>
				Include the stylesheets:
				<dl>
					<dt><code>title="outlinesheet"</code></dt><dd>Stylesheet used when displaying the outline view</dd>
					<dt><code>title="mainsheet"</code></dt><dd>Stylesheet used when displaying the normal view of slides</dd>
				</dl>
				<pre><code class="language-html">
&lt;link rel="stylesheet" title="outlinesheet" href="/templates/dewdrop/slides/template_outline.css"&gt;
&lt;link rel="stylesheet" title="mainsheet" href="/templates/dewdrop/slides/template.css"&gt;
				</code></pre>
			</div>
			<div>
				Include the main library:
				<pre><code class="language-html">
&lt;script src="/templates/slides/slides.js"&gt;&lt;/script&gt;
				</code></pre>
			</div>
			<div>
				Initialize metadata:
<pre><code class="language-html">
&lt;script&gt;
	initialize({
		"title": "Slides.js",
		"subtitle": "Example and slideshow",
		"authors": "François Hissel",
		"description": "Slides.js reference slideshow"
	});
&lt;/script&gt;
</code></pre>
			</div>
		</div>
	</section>

	<section class="content">
		<h1>Initialize metadata</h1>
		<div class="content">
			<pre><code class="language-js">
initialize({
	"title": "My wonderful slideshow",
	"subtitle": "Executive board",
	"authors": "John Doe",
	"description": "A slideshow for my office"
});
			</code></pre>

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Key</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>title</td><td>The title of the slideshow. It is used in the title page and as the title of the web page.</td></tr>
					<tr><td>subtitle</td><td>The subtitle, displayed on the title page.</td></tr>
					<tr><td>authors</td><td>The authors, displayed on the title page and used in the metadata.</td></tr>
					<tr><td>description</td><td>Metadata description</td></tr>
					<tr><td>date</td><td>A date, displayed on the title page. It is automatically retrieved from the system when the slideshow is loaded if it is not provided.</td></tr>
				</tbody>
			</table>
		</div>
	</section>

	<section class="content">
		<h1>General options in html element</h1>
		<div class="content">
			<pre><code class="language-html">
&lt;html lang="en" data-notes="example_notes.html" data-synchronize="/templates/slides/slides.php"&gt;
			</code></pre>
			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Attribute</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>lang</td><td>Language of the presentation, used to customize some automatically generated elements (like the title of the outline slides)</td></tr>
					<tr><td>data-notes</td><td>URL of the presenter notes page. See also <a href="#presenter-notes">here</a></td></tr>
					<tr><td>data-synchronize</td><td>URL of a synchronization script. Synchronization is turned on when this attribute is given.</td></tr>
				</tbody>
			</table>
		</div>
	</section>

	<section id="body-options" class="content">
		<h1>General options in body element</h1>
		<div class="content">
			<pre><code class="language-html">
&lt;body data-background-layer="active" data-foreground-layer="active"&gt;
			</code></pre>
			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Attribute</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>data-background-layer</td><td>If active, the background of slides is drawn on its own div layer instead of each slide. The net effect is that it is not animated during transitions between slides. This attribute takes precedence over the CSS <code>--background-layer</code> property. See also <a href="#backfore">here</a> for more explainations about background and foreground layers.</td></tr>
					<tr><td>data-foreground-layer</td><td>If active, the foreground of slides is drawn on its own div layer instead of each slide. This attribute takes precedence over the CSS <code>--foreground-layer</code> property.</td></tr>
				</tbody>
			</table>
		</div>
	</section>

	<h3>The structure</h3>
	
	<section class="content">
		<h1>Headings and slides</h1>
		<div class="content">
			<pre><code class="language-html" style="height: 30vh">
&lt;h2&gt;Outer structure&lt;/h2&gt;

&lt;h3 data-short="Templates"&gt;Slides templates&lt;/h3&gt;

&lt;section class="content"&gt; 
	&lt;h1&gt;A content slide&lt;/h1&gt;
	&lt;div class="content"&gt;
		Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
	&lt;/div&gt;
&lt;/section&gt;

&lt;section class="content"&gt; 
	&lt;h1&gt;Another content slide&lt;/h1&gt;
	&lt;div class="content"&gt;
		Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
	&lt;/div&gt;
&lt;/section&gt;
			</code></pre>

			<ul>
				<li>The slideshow is structured in sections, subsections… using <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>,… elements</li>
				<li>Each slide is represented by a <code>&lt;section&gt;</code> element. Its class defines the template of the slide (see also <a href="#slides-templates">here</a>)</li>
			</ul>
		</div>
	</section>
	
	<section id="heading-options" class="content">
		<h1>Headings</h1>
		<div class="content">
			<pre><code class="language-html">&lt;h2 data-short="Outer" data-outline="ClassicOutlineSlide"&gt;Outer structure&lt;/h2&gt;</code></pre>
			<p>HTML attributes and CSS properties:</p>

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>h2, h3, h4, h5, h6</td><td>data-outline</td><td>--outline</td><td>Name of a function to use to compose the outline</td></tr>
					<tr><td>h2, h3, h4, h5, h6</td><td>data-short</td><td></td><td>Short name for the heading, used in some components</td></tr>
				</tbody>
			</table>

			<p>The composition function should return an object that inherits the OutlineSlide class. It has one mandatory member function:
			<pre><code class="language-js">compose(entry, structure)</code></pre>
			where:
			<ul>
				<li><code>entry</code> is the structure node of the current heading</li>
				<li><code>structure</code> is the structure of the document (usually a global variable named structure with the tree of headings and slides)</li>
			</ul>
			</p>
		</div>
	</section>

	<section class="content">
		<h1>Headings</h1>
		<div class="content">
			<p>Currenty, two outline styles (which can be used in <code>data-outline</code>are defined:</p>

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Composition function</td><td>Outline style</td></tr>
				</thead>
				<tbody>
					<tr><td>ClassicOutlineSlide()</td><td>The title is a generic name (like "Outline" or "Sommaire"), the contents are a tree of sections and subsections</td></tr>
					<tr><td>FocusOutlineSlide()</td><td>The title is the name of the current heading, the contents are the list of subsections at the level immediately below the heading level</td></tr>
				</tbody>
			</table>

			<p>All outline slides have the <code>outline</code> and a <code>data-level</code> attribute with the nesting level of the current heading (1 for h1, 2 for h2…).</p>
		</div>
	</section>

	<section id="slide-options" class="content">
		<h1>Slides</h1>
		<div class="content">
			<pre><code class="language-html">&lt;section id="myslide" data-animation="fade"&gt;…&lt;/section&gt;</code></pre>
			<p>HTML attributes and CSS properties:</p>

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>section</td><td>id</td><td></td><td>Identifier of the slide. If none is provided, it is automatically generated.</td></tr>
					<tr><td>section</td><td>data-animation</td><td>--animation</td><td>Name of the animation. See also <a href="#animation">here</a></td></tr>
					<tr><td>section</td><td>data-components</td><td>--components</td><td>Array of components constructors. See also <a href="#components">here</a></td></tr>
					<tr><td>section</td><td>data-background</td><td>--background</td><td>Array of components constructors to add to the background layer. See also <a href="#backfore">here</a></td></tr>
					<tr><td>section</td><td>data-foreground</td><td>--foreground</td><td>Array of components constructors to add to the foreground layer. See also <a href="#backfore">here</a></td></tr>
					<tr><td>section</td><td>data-numfragment</td><td></td><td>Number of fragment. See also <a href="#fragment">here</a></td></tr>
					<tr><td>section</td><td>data-autofragment</td><td></td><td>Auto-fragment specification. See also <a href="#fragment">here</a></td></tr>
				</tbody>
			</table>

		</div>
	</section>

	<h3>Transitions</h3>

	<section id="animation" class="content">
		<h1>Transitions between slides</h1>
		<div class="content">
			The transition between two slides is defined in the destination slide. It can be setup either inline or in the CSS stylesheet.
			<pre><code class="language-html">&lt;section data-animation="convex"&gt;</code></pre>

			HTML attributes and CSS properties:
			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>section</td><td>data-animation</td><td>--animation</td><td>Name of an animation</td></tr>
				</tbody>
			</table>

			The name of the animation may be:
			<ul>
				<li>A function <code class="language-js">animate(source, dest, increasing, callback)</code>: in this case, the function is executed with <code>source</code> being the DOM object for the source slide, <code>dest</code> the DOM object for the destination slide, <code>increasing</code> a boolean indicating if the direction of the animation and <code>callback</code> a callback function to execute after the end of the animation</li>
				<li>A string <code>name</code>: the animation is done in four steps
					<ul>
						<li>apply the anim-<em>name</em>-transitions class to both the source and destination slide (generally this class should only define transitions)</li>
						<li>apply the anim-<em>name</em>-to class to the source slide</li>
						<li>apply the anim-<em>name</em>-from class to the destination slide</li>
						<li>remove the classes on both slides after the transitions are complete</li>
					</ul>
				</li>
			</ul>
		</div>
	</section>

	<section class="content" data-animation="none">
		<h1>Predefined transition "none"</h1>
		<div class="content">
			<code>data-animation="none"</code>

			Implementation through Javascript function:
			<pre><code class="language-js">
function animate_none(source,dest,increasing,callback) {
	source.style.visibility=null;
	if (source.dataset["onhide"]) window[source.dataset["onhide"]](source);
	dest.style.visibility='visible';
	if (dest.dataset["onshow"]) window[dest.dataset["onshow"]](dest);
	program_hashchange=true;
	location.hash="#"+dest.id;
	dest.style.visibility=null;
	callback();
}
			</code></pre>
		</div>
	</section>

	<section class="content" data-animation="fade">
		<h1>Predefined transition "fade"</h1>
		<div class="content">
			<code>data-animation="fade"</code>

			Implementation with CSS classes:
			<pre><code class="language-css">
.anim-fade-transitions {
	opacity: 1;
	transition: opacity 1s ease-in-out;
}

.anim-fade-from {
	opacity: 0 !important;
}

.anim-fade-to {
	opacity: 0 !important;
}
			</code></pre>
	</section>

	<section class="content" data-animation="sweep">
		<h1>Predefined transition "sweep"</h1>
		<div class="content">
			<code>data-animation="sweep"</code>

			Implementation with CSS classes:
			<pre><code class="language-css">
.anim-sweep-transitions {
	transition: left 1s ease-in-out;
}

.anim-sweep-from {
	left: 100%;
}

.anim-sweep-to {
	left: -100%;
}

			</code></pre>
	</section>
	
	<section class="content" data-animation="rotate">
		<h1>Predefined transition "rotate"</h1>
		<div class="content">
			<code>data-animation="rotate"</code>

			Implementation with CSS classes:
			<pre><code class="language-css">
.anim-rotate-transitions {
	transform-origin: -50% 50%;
	transition: transform 1s ease-in-out;
}

.anim-rotate-from {
	transform: rotate(-90deg);
}

.anim-rotate-to {
	transform: rotate(90deg);
}
			</code></pre>
	</section>
	
	<section class="content" data-animation="convex">
		<h1>Predefined transition "convex"</h1>
		<div class="content">
			<code style="background-color: transparent">data-animation="convex"</code>

			Implementation with CSS classes:
			<pre><code class="language-css">
.anim-convex-transitions {
	opacity: 1;
	transform-origin: center center 250px;
	transition-property: transform, opacity;
	transition-duration: 1s;
	transition-timing-function: ease-in-out;
}

.anim-convex-from {
	transform: rotateY(-120deg) scale(0.5);
	opacity: 0 !important;
}

.anim-convex-to {
	transform: rotateY(120deg) scale(0.5);
	opacity: 0 !important;
}
			</code></pre>
	</section>
	
	<section class="content" data-animation="takeoff">
		<h1>Predefined transition "takeoff"</h1>
		<div class="content">
			<code>data-animation="takeoff"</code>

			Implementation with CSS classes:
			<pre><code class="language-css">
.anim-takeoff-transitions {
	opacity: 1;
	transform-origin: center center;
	transition-property: transform, opacity;
	transition-duration: 1s;
	transition-timing-function: ease-in-out;
}

.anim-takeoff-from {
	transform: scale(0.2);
	opacity: 0 !important;
}

.anim-takeoff-to {
	transform: scale(5);
	opacity: 0 !important;
}
			</code></pre>
	</section>

	<section class="content" data-animation="sponge">
		<h1>Predefined transition "sponge"</h1>
		<div class="content">
			<code>data-animation="sponge"</code>

			Implementation with Javascript and CSS classes (see the source code).

			To use this animation, you have to add the following code at the beginning of your body. (Unfortunately, it is not possible to add it dynamically with Javascript because the mask-image CSS property requires an existing url.)

			<pre><code class="language-html">
&lt;svg viewBox="0 0 1 1" width="0" height="0"&gt;
	&lt;mask id="tempmask" maskContentUnits="objectBoundingBox"&gt;&lt;/mask&gt;
	&lt;mask id="tempmaskb" maskContentUnits="objectBoundingBox"&gt;&lt;/mask&gt;
&lt;/svg&gt;
			</code></pre>

	</section>

	<h2 data-short="Slide">The slide structure</h2>

	<h3 id="slides-templates">Slides templates</h3>
	
	<section class="title">
		<h1>A title slide</h1>
		<div class="authordate">John Doe<br/>July 14<sup>th</sup>, 1789</div>
		<pre><code class="language-html">
&lt;section class="title"&gt;
	&lt;h1&gt;A title slide&lt;br/&gt;&lt;span class="subtitle"&gt;The subtitle&lt;/span&gt;&lt;/h1&gt;
	&lt;div class="authordate"&gt;John Doe&lt;br/&gt;July 14&lt;sup&gt;th&lt;/sup&gt;, 1789&lt;/div&gt;
&lt;/section&gt;
		</code></pre>
	</section>

	<section class="content">
		<h1>A content slide</h1>
		<div class="content">
			<ul>
				<li>This is the main type of slide</li>
				<li>The content will be centered vertically</li>
			</ul>
		<pre><code class="language-html">
&lt;section class="content"&gt;
	&lt;h1&gt;A content slide&lt;/h1&gt;
	&lt;div class="content"&gt;
		&lt;ul&gt;
			&lt;li&gt;This is the main type of slide&lt;/li&gt;
			&lt;li&gt;The content will be centered vertically&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
&lt;/section&gt;
		</code></pre>
		</div>
	</section>
	
	<section class="content">
		<h1>A two-columns content slide</h1>
		<div class="content twocolumns">
			<div>
				<ul>
					<li>Make room for more content with two columns</li>
					<li>The columns will be automatically centered</li>
				</ul>
			</div>
			<div>
		<pre><code class="language-html">
&lt;section class="content"&gt;
	&lt;h1&gt;A content slide&lt;/h1&gt;
	&lt;div class="content twocolumns"&gt;
		&lt;div&gt;
			&lt;ul&gt;
				&lt;li&gt;Make room for more content with two columns&lt;/li&gt;
				&lt;li&gt;The columns will be automatically centered&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
		&lt;div&gt;
	&lt;pre&gt;&lt;code class="language-html"&gt;
	&lt;/code&gt;&lt;/pre&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/section&gt;
		</code></pre>
			</div>
		</div>
	</section>

	<section class="plain">
		<h1>A plain slide</h1>
		<div class="content">
			<ul>
				<li>When you want more place, just remove everything</li>
				<li>Now you can use the full page for your content</li>
			</ul>
			<pre><code class="language-html">
&lt;section class="plain"&gt;
	&lt;h1&gt;A plain slide&lt;/h1&gt;
	&lt;div class="content"&gt;
		&lt;ul&gt;
			&lt;li&gt;When you want more place, just remove everything&lt;/li&gt;
			&lt;li&gt;Now you can use the full page for your content&lt;/li&gt;
		&lt;/ul&gt;
		&lt;pre&gt;&lt;code class="language-html"&gt;
		&lt;/code&gt;&lt;/pre&gt;
	&lt;/div&gt;
&lt;/section&gt;
			</code></pre>
		</div>
	</section>
	
	<section class="focus">
		<h1>A focus slide</h1>
	</section>

	<section class="chessboard">
		<h1>A chessboard slide</h1>
		<div class="content">
			<div>
				<div>
					<ul>
						<li>A chessboard slide holds any number of divs with alternating colors</li>
						<li>The divs are automatically arranged on a chessboard</li>
						<li>The dimensions are computed so that each square has the same width and an optimal height</li>
						<li>But you have to take care to have the same numbers of cells in each row</li>
					</ul>
				</div>
				<div>
					<pre><code class="language-html">
&lt;section class="chessboard"&gt;
&lt;h1&gt;A chessboard slide&lt;/h1&gt;
&lt;div class="content"&gt;
	&lt;div&gt; &lt;div&gt;
		&lt;ul&gt;
			&lt;li&gt;A chessboard slide holds any number of divs with alternating colors&lt;/li&gt;
			&lt;li&gt;The divs are automatically arranged on a chessboard&lt;/li&gt;
			&lt;li&gt;The dimensions are computed so that each square has the same width and an optimal height&lt;/li&gt;
			&lt;li&gt;But you have to take care to have the same numbers of cells in each row&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/div&gt; &lt;div&gt;
			&lt;pre&gt;&lt;code class="language-html"&gt;
			&lt;/code&gt;&lt;/pre&gt;
	&lt;/div&gt; &lt;/div&gt;
	&lt;div&gt; &lt;div&gt;
		&lt;ul&gt; &lt;li&gt;Put each cell in a div&lt;/li&gt;
			&lt;li&gt;Then put each row of cells in a parent div&lt;/li&gt; &lt;/ul&gt;
		&lt;/div&gt; &lt;div&gt;
		&lt;ul&gt; &lt;li&gt;The template takes care of everything else&lt;/li&gt; &lt;/ul&gt;
	&lt;/div&gt; &lt;/div&gt;	
&lt;/div&gt;
&lt;/section&gt;
					</code></pre>
				</div>
			</div>
			<div>
				<div>
					<ul>
						<li>Put each cell in a div</li>
						<li>Then put each row of cells in a parent div</li>
					</ul>
				</div>
				<div>
					<ul>
						<li>The template takes care of everything else</li>
					</ul>
				</div>
			</div>	
		</div>
	</section>

	<h3>Components of slides</h3>

	<section class="content">
		<h1>What are components?</h1>
		<div class="content">
			Components are dynamically-generated pieces of contents that are automatically added to each slide based on their CSS properties. Components are updated when needed when slides are switched.

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Component</td><td>Constructor function</td><td>Description</td></tr>
				</thead>
				<tbody>
					<tr>
						<td>Mini-Toc</td>
						<td><code>Minitoc()</code></td>
						<td>A small clickable outline of the slideshow at the top of the slide</td>
					</tr>
					<tr>
						<td>Footer</td>
						<td><code>ClassicFooter()</code></td>
						<td>A footer line at the bottom of the slideshow with three part: the date, the title of the slideshow and the page number</td>
					</tr>
					<tr>
						<td>Image background</td>
						<td><code>ImageBackground(path)</code></td>
						<td>A background image for a slide. <code>path</code> can be either a single string which holds the URL of the background image, or an array of strings in which case the image is randomly chosen from the array</td>
					</tr>
					<tr>
						<td>Color background</td>
						<td><code>ColorBackground(color)</code></td>
						<td>A color background for a slide. <code>color</code> is the name of the color and must be supported by CSS</td>
					</tr>
					<tr>
						<td>HTML Element</td>
						<td><code>SimpleElement(string)</code></td>
						<td>An element prepended to the slide. <code>string</code> may be any valid HTML code. Classes defined in the CSS slideshow will apply to the new element.</td>
					</tr>
				</tbody>
			</table>
		</div>
	</section>

	<section id="components" class="content">
		<h1>Adding components to the slides</h1>
		<div class="content">
			Components can be added either inline in the HTML file or in the CSS stylesheet. If set in both, the inline attribute takes precedence over the CSS property.<br/>

			HTML attributes and CSS properties:
			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>section</td><td>data-components</td><td>--components</td><td>Array of components constructors</td></tr>
				</tbody>
			</table>

			Example of adding components inline:
			<pre><code class="language-html">
&lt;section data-components="[Minitoc(), ClassicFooter()]"&gt;
			</code></pre>

			The same configuration in the CSS stylesheet:
			<pre><code class="language-css">
--components: "[Minitoc(), ClassicFooter()]";
			</code></pre>
		</div>
	</section>
	
	<section id="backfore" data-components="[Minitoc(),ClassicFooter()]" data-foreground="[]" class="content">
		<h1>Background and foreground layers</h1>
		<div class="content">
			<p>Background and foreground layers are two special layers that are automatically added when the <a href="#body-options">corresponding option</a> is set in the body element.</p>

			Components can be added to foreground and background layers for each slide.
			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>section</td><td>data-background</td><td>--background</td><td>Array of components constructors to add to the background layer</td></tr>
					<tr><td>section</td><td>data-foreground</td><td>--foreground</td><td>Array of components constructors to add to the foreground layer</td></tr>
				</tbody>
			</table>

			<p>When the background or foreground layer is not active, adding a component to this layer has no different effect than adding it as a component of the slide (using the data-components attribute or the --components CSS property). But when those layers are active, they are added to the corresponding layer. The net effect is that they stay in place when the slides are animated during a transition.</p>

			<p>For this slide, the Minitoc and footer are removed from the foreground layer and attached to the slide components. This is why they're taken with the slide when you switch it.</p>

		</div>
	</section>

	<h3 id="fragment">Fragments</h3>
	<section class="content">
		<h1>Fragments</h1>
		<div class="content">
			<p data-fragment="{'0':['invisible'],'2-':['semivisible']}">Fragments are pieces of slides which are displayed or animated when browsing the slideshow. Every HTML element can be animated.</p>

			<p data-fragment="{'0-1':['invisible'],'3-':['semivisible']}">Fragments are added with the <code>data-fragment</code> attribute on the element. This attribute holds a <strong>fragment specification</strong>, which is a JSON dictionary (where double quotes are replaced by single quotes). The key is a slide specification and the value if an array of classes to apply to the corresponding elements.</p>

			<pre data-fragment="{'0-2':['invisible'],'4-':['semivisible']}"><code class="language-html">
&lt;p data-fragment="{'0':['invisible'],'2-':['semivisible']}"&gt;Fragments are pieces of slides which are displayed or animated when browsing the slideshow. Every HTML element can be animated.&lt;/p&gt;

&lt;p data-fragment="{'0-1':['invisible'],'3-':['semivisible']}"&gt;Fragments are added with the &lt;var&gt;data-fragment&lt;/var&gt; attribute on the element. This attribute may hold a &lt;strong&gt;fragment specification&lt;/strong&gt;, which is a JSON dictionary (where double quotes are replaced by single quotes). The key is a slide specification and the value if an array of classes to apply to the corresponding elements.&lt;/p&gt;

&lt;pre data-fragment="{'0-2':['invisible']}"&gt;&lt;code class="language-html"&gt;
&lt;/code&gt;&lt;/pre&gt;
			</code></pre>

			<p data-fragment="{'0-3':['invisible'],'5-':['semivisible']}">The <strong>slide specification</strong> is a string with a comma-separated list of intervals ; each interval has the form <code>min-max</code> or can hold a single <code>num</code> value. The classes are applied when the fragment number is between <code>min</code> and <code>max</code>, or when the fragment number is <code>num</code>. Fragment number 0 is the first fragment. The slide specification may also be the keyword <code>"start"</code> ; in this case, the classes are applied to the slide <em>before</em> it appears on the screen. This is mostly useful when applying an animation to the first fragment, in order to set the initial state.</p>

			<p data-fragment="{'0-4':['invisible']}">When <code>data-numfragment</code> is included in the slide <code>section</code> attribute, it stands for the number of fragments in the current slide. If it is not given, it is automatically calculated as the maximum fragment number in the fragment specifications (but it may be wrong).</p>
		</div>
	</section>

	<section class="content">
		<h1>Fragments</h1>
		<div class="content">
			<p>When <code>data-numfragment</code> is included in the slide <code>section</code> attribute, it stands for the number of fragments in the current slide. If it is not given, it is automatically calculated as the maximum fragment number in the fragment specifications (but it may be wrong).</p>

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>Any</td><td>data-fragment</td><td></td><td>Fragment specification, classes to apply on the element based on the fragment number</td></tr>
					<tr><td>section</td><td>data-numfragment</td><td></td><td>Number of fragments in the slide</td></tr>
				</tbody>
			</table>
		</div>
	</section>

	<section class="content">
		<h1>Fragments animation</h1>
		<div class="content">
			<p class="pulse" data-fanim="{'0': 'fragment_cssanim'}">Fragments can also be animated.</p>

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>Any</td><td>data-fanim</td><td></td><td>Fragment animation specification, function to animate the element based on the fragment number</td></tr>
				</tbody>
			</table>

			<p class="pulse" data-fanim="{'1': 'fragment_cssanim'}">The <strong>fragment animation specification</strong> is a JSON dictionary which keys are slides specifications and which values are names of animation functions. Currently, a single animation function is defined: <code>fragment_cssanim</code>, which runs the CSS animations defined on the element.</p>

			<div class="pulse" data-fanim="{'2': 'fragment_cssanim'}">
				CSS stylesheet:
				<pre><code class="language-css">
@keyframes pulsebox {
	from { transform: scale(1); }
	50% { transform: scale(1.2); }
	to { transform: scale(1); }
}
.pulse { animation: 1s ease-in-out pulsebox running; }
				</code></pre>

				HTML code:
				<pre><code class="language-html">
&lt;p class="pulse" data-fanim="{'0': 'fragment_cssanim'}"&gt;Fragments can also be animated.&lt;/p&gt;
&lt;p class="pulse" data-fanim="{'1': 'fragment_cssanim'}"&gt;The &lt;strong&gt;fragment animation specification&lt;/strong&gt; is a JSON dictionary which keys are slides specifications and which values are names of animation functions. Currently, a single animation function is defined: &lt;code&gt;fragment_cssanim&lt;/code&gt;, which runs the CSS animations defined on the element&lt;/p&gt;
				</code></pre>
			</div>
		</div>
	</section>

	<section class="content" data-autofragment="['.content ul>li',{'before':['semivisible'],'current':['pulse'],'animation':'fragment_cssanim'}]">
		<h1>Auto-fragments</h1>
		<div class="content">
			<ul>
				<li>Auto-fragments automatically generate fragments on slides based on CSS selectors or data-attributes</li>
				<li>Auto-fragments may be added on any element below and including the slide <code>section</code> element
					<ul>
						<li>When they are added in the slide <code>section</code> element, they are specified by a two elements array. The first element is a CSS selector to identify all the elements in the slide for which a fragment has to be generated. The second is an auto-fragment specification</li>
						<li>When they are added to an element below the <code>section</code> element, they are specified by a single auto-fragment specification. A fragment is generated only for the corresponding element. In this case, it is mostly useful when added in the CSS stylesheet.</li>
					</ul>
				</li>
			</ul>
			<table class="shadowed" style="width:90%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>section</td><td>data-autofragment</td><td>--autofragment</td><td>JSON array with two elements: a CSS selector and an auto-fragment specification</td></tr>
					<tr><td>Any below section</td><td>data-autofragment</td><td>--autofragment</td><td>Auto-fragment specification</td></tr>
				</tbody>
			</table>
		</div>
	</section>

	<section class="content" data-autofragment="['.content ul>li',{'before':['semivisible'],'current':['pulse'],'animation':'fragment_cssanim'}]">
		<h1>Auto-fragments for slides element</h1>
		<div class="content">
			<ul>
				<li>An <strong>auto-fragment specification</strong> is a JSON dictionary which may hold four keys:
					<ul>
						<li><code>before</code>: Array of names of classes to apply on the element before the current fragment is active</li>
						<li><code>current</code>: Array of names of classes to apply when the current fragment is active</li>
						<li><code>after</code>: Array of names of classes to apply after the current fragment has been active</li>
						<li><code>animation</code>: Name of function used to activate an animation when the current fragment has just been active</li>
					</ul>
				</li>
				<li>Fragments are generated in four steps:
					<ul>
						<li>Browse all elements in the current slide matching the given selector ;</li>
						<li>Each element is made « active » in turn in a numbered fragment ;</li>
						<li>Generate a fragment specification for the active element: for all previous fragments, the classes in <code>before</code> are applied ; for the current fragment, the classes in <code>current</code> are applied ; and for the next fragments, the classes in <code>after</code> are applied ;</li>
						<li>Generate a fragment animation specification for the active element.</li>
					</ul>
				</li>
			</ul>
			<pre><code class="language-html">
&lt;section class="content" data-autofragment="['.content ul&gt;li',{'before':['semivisible'],'current':['pulse'],'animation':'fragment_cssanim'}]"&gt;
	&lt;h1&gt;Auto-fragments for slides element&lt;/h1&gt;
	&lt;div class="content"&gt;
		&lt;ul&gt;
			&lt;li&gt;An &lt;strong&gt;auto-fragment specification&lt;/strong&gt; is a JSON dictionary which may hold four keys:
				&lt;ul&gt;
					&lt;li&gt;&lt;code&gt;before&lt;/code&gt;: Array of names of classes to apply on the element before the current fragment is active&lt;/li&gt;
					&lt;li&gt;&lt;code&gt;current&lt;/code&gt;: Array of names of classes to apply when the current fragment is active&lt;/li&gt;
			</code></pre>
		</div>
	</section>

	<section id="autofragments-elements" class="content">
		<h1>Auto-fragments for elements inside slides</h1>
		<div class="content">
			<ul>
				<li>Auto-fragments may also be applied on elements inside slides</li>
				<li>In this case, they are set by a single auto-fragment specification (without the CSS selector used in slides auto-fragment specifications)</li>
				<li>Fragments are generated in the same way as for slides auto-fragment specifications, but this way offers more accurate fine-tuning</li>
				<li>While it is possible, there is absolutely no benefit of using <code>data-autofragment</code> attributes inline in HTML code when you can also use <code>data-fragment</code> which offers even more customization. On the other hand, this attribute is well suited for CSS stylesheets.</li>
			</ul>

			CSS stylesheet:
			<pre><code class="language-css">
#autofragments-elements ul > li {
	--autofragment: "{'before':['semivisible'],'current':['pulse'],'animation':'fragment_cssanim'}";
}
			</code></pre>

			HTML code:
			<pre><code class="language-html">
&lt;section id="autofragments-elements" class="content"&gt;
	&lt;h1&gt;Auto-fragments for elements inside slides&lt;/h1&gt;
	&lt;div class="content"&gt;
		&lt;ul&gt;
			&lt;li&gt;Auto-fragments may also be applied on elements inside slides&lt;/li&gt;
			&lt;li&gt;In this case, they are set by a single auto-fragment specification (without the CSS selector used in slides auto-fragment specifications)&lt;/li&gt;
			</code></pre>
		</div>
	</section>

	<h2 data-short="Widgets">The inner widgets</h2>

	<h3>Blocks</h3>
	<section class="content">
		<h1>Colored blocks</h1>
		<div class="content">
			<div class="block">
				<h1>A standard block</h1>
				<div class="content">
					This is a standard block to highlight some content.
				</div>
			</div>
			<pre><code class="language-html">
&lt;div class="block"&gt;
	&lt;h1&gt;A standard block&lt;/h1&gt;
	&lt;div class="content"&gt;
		This is a standard block to highlight some content.
	&lt;/div&gt;
&lt;/div&gt;
			</code></pre>

			<div class="infoblock">
				<h1>An information block</h1>
				<div class="content">
					This is an informative block.
				</div>
			</div>
			<pre><code class="language-html">
&lt;div class="infoblock"&gt;
	&lt;h1&gt;An information block&lt;/h1&gt;
	&lt;div class="content"&gt;
		This is an information block.
	&lt;/div&gt;
&lt;/div&gt;
			</code></pre>
		</div>
	</section>

	<section class="content">
		<h1>Colored blocks</h1>
		<div class="content">
			<div class="warningblock">
				<h1>A warning block</h1>
				<div class="content">
					This is a warning block.
				</div>
			</div>
			<pre><code class="language-html">
&lt;div class="warningblock"&gt;
	&lt;h1&gt;A warning block&lt;/h1&gt;
	&lt;div class="content"&gt;
		This is a warning block.
	&lt;/div&gt;
&lt;/div&gt;
			</code></pre>
		</div>
	</section>

	<section class="content">
		<h1>Citations</h1>
		<div class="content">
			<div class="block">
				<h1>De l'intérêt des citations</h1>
				<div class="content">
					<blockquote>
						Une citation sans références est à peu près aussi utile qu'une horloge sans aiguilles.
					</blockquote>
					<cite>Samuel Johnson</cite>
				</div>
			</div>
			<pre><code class="language-html">
&lt;div class="block"&gt;
&lt;h1&gt;De l'intérêt des citations&lt;/h1&gt;
&lt;div class="content"&gt;
	&lt;blockquote&gt;
		Une citation sans références est à peu près aussi utile qu'une horloge sans aiguilles.
	&lt;/blockquote&gt;
	&lt;cite&gt;Samuel Johnson&lt;/cite&gt;
&lt;/div&gt;
			</code></pre>
		</div>
	</section>

	<h3>Images and tables</h3>

	<section class="content">
		<h1>Images</h1>
		<div class="content">
			<p>Images can be automatically centered with the class <code>centered</code>. A shadow may be added with the class <code>shadowed</code></p>

			<figure class="centered">
				<svg class="shadowed" style="width: 60vw; height: 40vh">
					<rect width="100%" height="100%" stroke="var(--secondary-dark)" fill="var(--secondary-lighter)" />
					<line x1="0" y1="0" x2="100%" y2="100%" stroke="var(--secondary-dark)" />
					<line x1="100%" y1="0" x2="0" y2="100%" stroke="var(--secondary-dark)" />
				</svg>
			</figure>

			<pre><code class="language-html">
&lt;figure class="centered"&gt;
	&lt;svg class="shadowed" style="width: 60vw; height: 40vh"&gt;
		&lt;rect width="100%" height="100%" stroke="var(--secondary-dark)" fill="var(--secondary-lighter)" /&gt;
		&lt;line x1="0" y1="0" x2="100%" y2="100%" stroke="var(--secondary-dark)" /&gt;
		&lt;line x1="100%" y1="0" x2="0" y2="100%" stroke="var(--secondary-dark)" /&gt;
	&lt;/svg&gt;
&lt;/figure&gt;
			</code></pre>

		</div>
	</section>
	
	<section class="content">
		<h1>Tables</h1>
		<div class="content">
			Tables are designed according to the color theme, and can also be shadowed.

			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Class name</td><td>Class effect</td></tr>
				</thead>
				<tbody>
					<tr><td>headcolumn</td><td>The first column has a background color to make it stand out as a head column</td></tr>
					<tr><td>fullwidth</td><td>The table takes up the full width</td></tr>
					<tr><td>grid</td><td>The table has a visible grid</td></tr>
					<tr><td>leftaligned</td><td>The table cells are left-aligned (except for the head row)</td></tr>
				</tbody>
			</table>
			<pre><code>
&lt;table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto"&gt;
	&lt;thead&gt;
		&lt;tr&gt;&lt;td&gt;Class name&lt;/td&gt;&lt;td&gt;Class effect&lt;/td&gt;&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;&lt;td&gt;headcolumn&lt;/td&gt;&lt;td&gt;The first column has a background color to make it stand out as a head column&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td&gt;fullwidth&lt;/td&gt;&lt;td&gt;The table takes up the full width&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td&gt;grid&lt;/td&gt;&lt;td&gt;The table has a visible grid&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td&gt;leftaligned&lt;/td&gt;&lt;td&gt;The table cells are left-aligned (except for the head row)&lt;/td&gt;&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
			</code></pre>
		</div>
	</section>

	<h3>Predefined colors</h3>

	<section id="colortheme" class="content">
		<h1>Predefined colors</h1>
		<div class="content">
			Color themes are automatically generated when the basis colors are selected in the template. Colors can be used with one of the following methods:

			<ul>
				<li>in Sass templates, use <code>map.get($theme, "primary-light")</code></li>
				<li>in CSS and HTML, use <code>var(--primary-light)</code></li>
			</ul>

			<table id="colortable" class="shadowed">
			</table>
		</div>
	</section>

	<h2 data-short="Navigation">Navigating the slideshow</h2>

	<section class="content">
		<h1>Navigation</h1>
		<div class="content">
			<dl class="rightheader">
				<dt><key>→</key></dt> <dd>Display next slide fragment, or next slide if there is no more fragment</dd>
				<dt><key>Space</key></dt> <dd>Display next slide fragment, or next slide if there is no more fragment</dd>
				<dt><key>←</key></dt> <dd>Display previous slide fragment, or previous slide if there is no more fragment</dd>
				<dt><key>↓</key></dt> <dd>Display next slide</dd>
				<dt><key>↑</key></dt> <dd>Display previous slide</dd>
				<dt><key>PageDown</key></dt> <dd>Move to next outline (section, subsection…)</dd>
				<dt><key>PageUp</key></dt> <dd>Move to previous outline (section, subsection…)</dd>
				<dt><key>Home</key></dt> <dd>Move to the start of the slideshow</dd>
				<dt><key>End</key></dt> <dd>Move to the end of the slideshow</dd>
				<dt><key>N</key></dt> <dd>Open presenter notes</dd>
				<dt><key>S</key></dt> <dd>Set synchronize mode</dd>
				<dt><key>Shift</key><key>S</key></dt> <dd>Display synchronization URL (when in synchronize mode)</dd>
				<dt><key>O</key></dt> <dd>Open outline view</dd>
				<dt><key>P</key></dt> <dd>Toggle document view (printable text document)</dd>
				<dt>Double click</dt> <dd>Toggle fullscreen mode</dd>
			</dl>

			It is also possible to navigate slides by swiping leftwards, rightwards, upwards or downwards when on a mobile device.
		</div>
	</section>

	<section class="content">
		<h1>Outline view</h1>
		<div class="content">
			The outline view displays small versions of slides in a grid and allows to quickly jump to another slide.
			<dl class="rightheader">
				<dt><key>O</key></dt> <dd>Open the outline view</dd>
				<dt><key>←</key></dt> <dd>Select the previous slide</dd>
				<dt><key>→</key></dt> <dd>Select the next slide</dd>
				<dt><key>Enter</key></dt> <dd>Close the outline view and switch to the selected slide</dd>
			</dl>

			A new slide can also be selected by clicking on it.
		</div>
	</section>

	<section id="presenter-notes" class="content">
		<h1>Presenter notes</h1>
		<div class="content">
			<ul>
			<li>The presenter notes are displayed on a new window, so that they can be moved to another screen.</li>
			<li>The presenter notes displays the current time and tells if you are late or early based on the talk duration you provide.</li>
			<li>The notes are on a single page. The content is scrolled automatically according to the current position in the slideshow. There are two ways for this to work:
				<ul>
					<li>either the identifiers of headings of the presenter notes pages should match the identifiers of slides in the slideshow (custom ids or auto-generated ids) ; </li>
					<li>or one of the heading content of the presenter notes pages should match the title of a slide.</li>
				</ul></li>
			</ul>

			<dl class="rightheader">
				<dt><key>N</key></dt> <dd>Toggle the presenter notes. The URL must be configured in the HTML tag</dd>
				<dt><key>;</key></dt> <dd>Scroll down the presenter notes without leaving the slideshow</dd>
				<dt><key>,</key></dt> <dd>Scroll up the presenter notes without leaving the slideshow</dd>
			</dl>
		</div>
	</section>

	<section class="content">
		<h1>Synchronization</h1>
		<div class="content">
			<p>The presenter slideshow (<em>master</em>) may be synchronized with the audience devices (<em>slaves</em>) when they are connected on the same presentation. When synchronized, slave devices automatically switch slides to match the master progress. This does not include fragments however.</p>
			<p>The synchronization mode needs a synchronization script which manages the process through a remote database. The address of the script shall be included in the HTML data attributes.</p>
			<pre><code class="language-html">
&lt;html lang="en" data-notes="example_notes.htm" data-synchronize="/templates/slides/slides.php"&gt;
			</code></pre>
			<table class="shadowed" style="width:80%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>Elements</td><td>HTML attribute</td><td>CSS property</td><td>Meaning</td></tr>
				</thead>
				<tbody>
					<tr><td>html</td><td>data-synchronize</td><td></td><td>Path of the synchronization script</td></tr>
				</tbody>
			</table>
		</div>
	</section>

	<section class="content">
		<h1>Synchronization</h1>
		<div class="content">
			<p>To activate the master synchronization mode, hit <key>S</key> and then an id (any id can be entered, it is mainly useful when two speakers are presenting at the same time).</p>
			<p>When the synchronization mode is active, hitting <key>Shift</key><key>S</key> displays a link and a QR-Code to connect to the slideshow in slave mode.</p>
			<p>The synchronization script must have access to a PostgreSQL database at least on version 12. The database must have a table created by the script pgschema.sql.</p>
		</div>
	</section>


	<section class="content">
		<h1>Presenter notes</h1>
		<div class="content">
			Example of note page:
			<pre><code class="language-html">
&lt;!DOCTYPE html&gt;
&lt;html lang="fr" data-duration="1h"&gt;
&lt;head&gt;
	&lt;meta charset="utf-8"&gt;
	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;

	&lt;title&gt;Notes de présentation&lt;/title&gt;
	&lt;link rel="stylesheet" href="/templates/slides/template_notes.css"&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;Slides.js&lt;/h1&gt;

	&lt;h2&gt;Slides.js in a nutshell…&lt;/h2&gt;
	Slides.js is a lightweight framework to generate animated slideshows using templates.

	Templates can be easily developed, using only CSS declarations, even for the animations and dynamic components (outline slides, background images, footer…).
&lt;/body&gt;
&lt;script src="/templates/slides/template_notes.js"&gt;&lt;/script&gt;
&lt;/html&gt;
			</code></pre>

			<p>The <code>data-duration</code> attribute in the HTML element is used to indicate the target time for the slideshow. An example is <code>data-duration="1h20mn"</code> to tell the slideshow should last one hour and twenty minutes. This is used to estimate if the presenter is late or early in his talk.</p>
		</div>
	</section>


	<h2 data-short="Templates">Creating your own template</h2>

	<h3>Creating the template</h3>
	<section class="content">
		<h1>Structure of the template</h1>
		<div class="content">
			<pre><code class="language-css">
@use "sass:map"; // Use the map library, needed if you want to use theme colors in you Sass stylesheet
@import "colors"; // Import a colors definition stylesheet (optional)
@import "fonts"; // Import a fonts definition stylesheet (optional)
@import '../template.scss'; // Import main template
			</code></pre>

			<p>The easiest way to create a new template is to generate it with <a href="https://sass-lang.com">Sass</a>.</p>

			<p>The main template <strong>must</strong> be called after base colors are defined (since it automatically generates variants of those base colors if needed.</p>
		</div>
	</section>

	<h3>Customizing the color theme</h3>
	<section class="content">
		<h1>Defining color themes</h1>
		<div class="content">
			<p>See <a href="#colortheme">here</a> for information about colors. If you use Sass, themes are automatically generated from base colors.</p>
			
			<p>Any theme colors may be defined in the Sass or CSS stylesheet. If you use, you may want to define your base colors this way:</p>

			<pre><code class="language-css">
$theme: (
  "primary": #00A6E2FF,
  "secondary": #6AB96FFF,
  "tertiary": #ED6A53FF,
  "quaternary": #CC9F72FF,
  "neutral": #777777FF
)
			</code></pre>

			<p>You can also override other color variants or use the predefined ones:</p>

			<pre><code class="language-css">
$theme: (
  "primary": #00A6E2FF,
  "primary-lighter": #99D7F7FF,
  "secondary": #ED6A53FF
)
			</code></pre>
		</div>
	</section>

	<h3>CSS stylesheet</h3>
	<section class="content">
		<h1>Customize the general look</h1>
		<div class="content">
			These are some elements which may be customized through CSS:

			<table class="shadowed" style="width:90%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>CSS selector</td><td>Where it is used in the slideshow</td></tr>
				</thead>
				<tbody>
					<tr><td><code>body</code></td><td>General options (font family and size). Also configure the generation of a background and foreground layer (as shown <a href="#body-options">here</a>).</td></tr>
					<tr><td><code>body &gt; h1</code>, <code>body &gt; h2</code>…</td><td>Automatic generation of outlines at the start of new sections or at the beginning of the slideshow(as show <a href="heading-options">here</a>).</td></tr>
				</tbody>
			</table>

		</div>
	</section>

	<section class="content">
		<h1>Customize the look of slides</h1>
		<div class="content">
			<p>Some options can be configured for every slide, whatever their template. In this case, they can be added to the <code>body>section, #thumblayer&gt;div.wthumb&gt;section</code>.</p>

			<p>See <a href="#slide-options">here</a> for the list of parameters which you can apply on the slide section element.</p>
			
			<p>Please always use the two selectors (body and thumblayer) as the second one is used in mini-slides view.</p>
		</div>
	</section>

	<section class="content">
		<h1>Customize the title slide</h1>
		<div class="content">
			<p>The title slide is automatically generated at the beginning of the slideshow based on the given metadata. It may be configured by the <code>body&gt;section#title, #thumblayer&gt;div.wthumb&gt;section#title</code> selector.</p>

			<table class="shadowed" style="width:90%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>CSS selector</td><td>Where it is used in the slideshow</td></tr>
				</thead>
				<tbody>
					<tr><td><code>& &gt; h1</code></td><td>Title of the slideshow</td></tr>
					<tr><td><code>& &gt; h1 .subtitle</code></td><td>Subtitle of the slideshow</td></tr>
					<tr><td><code>& .authordate</code></td><td>Date and author block</td></tr>
				</tbody>
			</table>

		</div>
	</section>

	<section class="content">
		<h1>Customize the slides</h1>
		<div class="content">
			<p>There are several slides styles. Each style has an associated class which is applied to the slide <code>section</code> element. They may be configured using the following selectors:</p>

			<table class="shadowed" style="width:90%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>CSS selector</td><td>Slide style</td></tr>
				</thead>
				<tbody>
					<tr><td><code>body&gt; section.content</code></td><td>General content slide</td></tr>
					<tr><td><code>body &gt; section.focus</code></td><td>Focus slide (a single title)</td></tr>
					<tr><td><code>body &gt; section.plain</code></td><td>Plain slide (with no background or foreground)</td></tr>
					<tr><td><code>body &gt; section.chessboard</code></td><td>Chessboard style slide</td></tr>
					<tr><td><code>body &gt; section.content.twocolumns</code></td><td>Content slide with two columns</td></tr>
				</tbody>
			</table>

			<p>You can of course add your own slide style and use it in your presentation. For the predefined slide styles, the following elements may be configured:</p>

			<table class="shadowed" style="width:90%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>CSS selector</td><td>Where it is used in the slideshow</td></tr>
				</thead>
				<tbody>
					<tr><td><code>& &gt; h1</code></td><td>Title of the slide</td></tr>
					<tr><td><code>& &gt; .content</code></td><td>Content block of the slide</td></tr>
				</tbody>
			</table>

		</div>
	</section>

	<section class="content">
		<h1>Customize the outline slides</h1>
		<div class="content">
			<p>Outline slides are automatically generated at the beginning of the slideshow or at the start of a section or subsection, when their associated heading element has the <code>--outline</code> attribute set and not empty.</p>

			<p>When they are generated, outline slides have the <code>outline</code> class and have a data-attribute <code>data-level</code> with the level of their associated heading (1 for h1, 2 for h2…)</p>

			<p>Outline slides inherit from content slides. In addition to content slides parameters, the following elements may be configured in outline slides:</p>

			<table class="shadowed" style="width:90%; margin-left: auto; margin-right: auto">
				<thead>
					<tr><td>CSS selector</td><td>Where it is used in the slideshow</td></tr>
				</thead>
				<tbody>
					<tr><td><code>body &gt; section.outline &gt; div.content .current</code></td><td>Current part of the slideshow. This allows to highlight the current section or subsection on the outline slide.</td></tr>
				</tbody>
			</table>

		</div>
	</section>

	<h3>Creating new components</h3>

	<section class="content">
		<h1>Creating a new component</h1>
		<div class="content">
			To create a new component, you have to do it in a Javascript script, which must be loaded after the main slides.js script file. You have to create a new class and a new function which returns an instance of this class.
			<pre><code class="language-js">
class ClassicFooterObject extends Component {
	constructor(pconfig) {
		super();
		this.componentName = 'component-classicfooter';
		this.config = pconfig;
	}

	add_to(slide, slideo) {
		super.add_to(slide, slideo);
		let footer=document.createElement('footer');
		footer.classList.add(this.componentName);
		footer.innerHTML='&lt;div&gt;'+meta["date"]+'&lt;/div&gt;&lt;div&gt;'+meta["title"]+'&lt;/div&gt;&lt;div&gt;'+slideo["num"]+'/'+(slides.length-1)+'&lt;/div&gt;';
		slide.insertAdjacentElement('afterbegin',footer);
	}

	update(slide, slideo) {
		super.update(slide, slideo);
		let footer=slide.getElementsByClassName(this.componentName)[0];
		footer.querySelector('div:last-child').innerHTML=slideo["num"]+'/'+(slides.length-1);
	}
}
function ClassicFooter(pconfig) {return new ClassicFooterObject(pconfig);}
			</code></pre>
		</div>
	</section>

	<section class="content">
		<h1>Creating a new component</h1>
		<div class="content">
			<ul>
				<li>The new class must extend the Component class</li>
				<li>Its constructor must call the base constructor an it must initialize the <code>componentName</code> member, which is the type of the component</li>
				<li>The constructor may have parameters and may store them in the class</li>
				<li>The class must implement two member functions:
					<ul>
						<li>add_to(slide, slideo): this function adds the component to the <code>slide</code> DOM element. <code>slideo</code> is the current slide object in the slides array (it may not point to the <code>slide</code> object when the component is added to a different slide, for example to the background or foreground layer. However the function must sometimes know the current slide to customize its effect.</li>
						<li>update(slide, slideo): this function updates the component on the <code>slide</code> DOM element. <code>slideo</code> is the current slide object in the slides array. This function is used when the component is placed on the background or foreground layer. It is not removed and added when a new slide is displayed but only updated.</li>
					</ul>
				</li>
				<li>The function name is the one which can be used in the CSS <code>--components</code>, <code>--background</code> or <code>--foreground</code> parameters, or in the corresponding HTML attributes <code>data-components</code>, <code>data-background</code> and <code>data-foreground</code>.</li>
			</ul>
		</div>
	</section>

	<h3>Creating new outline styles</h3>
	<section class="content">
		<h1>Creating a new outline style</h1>
		<div class="content">
			To create a new outline style, you have to do it in a Javascript script, which must be loaded after the main slides.js script file. You have to create a new class and a new function which returns an instance of this class.
			<pre><code class="language-js">
class FocusOutlineSlideObject extends OutlineSlide {
	compose(entry) {
		let h = document.createElement("h1");
		h.innerHTML = entry.name;
		entry.outline_slide.append(h);
		let outline = document.createElement("div");
		outline.classList.add("content")
		entry.outline_slide.append(outline);
		let spart = generate_html_from_structure(entry.parts, ['H'+(entry.level+1).toString()], entry.outline_slide.id);
		if (spart) outline.append(spart);
	}
}
function FocusOutlineSlide() {return new FocusOutlineSlideObject();}
			</code></pre>
		</div>
	</section>

	<section class="content">
		<h1>Creating a new outline style</h1>
		<div class="content">
			<ul>
				<li>The new class must extend the OutlineSlide class</li>
				<li>The constructor may have parameters and may store them in the class</li>
				<li>The class must implement one member functions: <code>compose(entry, structure)</code>. This function generates a full slide content (with h1 title and div content) by filling it out with the slideshow outline. It has two parameters:
					<ul>
						<li><code>entry</code>: this in an entry in the internal <code>structure</code> object representing the structure of the slideshow. The entry has the following variables set:
							<dl>
								<dt>name</dt><dd>Title of the part</dd>
								<dt>level</dt><dd>Level of the heading (0 for h1, 1 for h2...)</dd>
								<dt>short</dt><dd>Short title of the part</dd>
								<dt>element</dt><dd>DOM element of the heading</dd>
								<dt>parts</dt><dd>List of subparts</dd>
								<dt>parent</dt><dd>Parent entry of the element</dd>
								<dt>target</dt><dd>Target slide of the heading, when a link to the heading is clicked. For a normal slide, it is the very same slide. For a header, it is the outline slide generated for this header if it exists, otherwise the next standard slide</dd>
							</dl>
						</li>
						<li><code>structure</code>: full structure of the slideshow. You must use this variable if you want to create a full outline from a sub-heading (the sub-heading does not hold the full outline of the slideshow but only its children headings.</li>
					</ul>
				</li>
				<li>The function name is the one which can be used in the CSS <code>--outline</code> parameter, or in the corresponding <code>data-outline</code> HTML attribute.</li>
			</ul>
		</div>
	</section>


	
	<section class="content">
		<h1>Thanks for your interest!</h1>
		<div class="content qrcode"></div>
	</section>

</body>
<script>
	for (let el of document.getElementsByClassName("code-sample")) {
		el.append(view_source(el.dataset["selector"], el.dataset["num-lines"], el.dataset["language"]));
	}
	function view_source(selector, num_lines, language) {
		let source;
		source = selector ? document.querySelector(selector) : document.documentElement;
		if (!source) return;
		source = source.outerHTML;
		if (num_lines) source = source.split("\n", num_lines).join("\n");
		let pre = document.createElement("pre");
		let code = document.createElement("code");
		if (language) code.classList.add("language-"+ language);
		code.innerHTML = source.replace(/[\u00A0-\u9999<>\&]/g, i => '&#'+i.charCodeAt(0)+';')
		pre.append(code);
		return pre;
	}
	function generate_table_color() {
		const hues = ["primary", "secondary", "tertiary", "quaternary", "neutral"];
		const lightnesses = ["lightest", "lighter", "light", "", "dark", "darker", "darkest"];
		let table = document.getElementById("colortable");
		table.classList.add("plain");
		let thead = document.createElement("thead");
		let tr = document.createElement("tr");
		tr.append(document.createElement("td"));
		for (const hue of hues) {
			let td = document.createElement("td");
			td.textContent = hue;
			tr.append(td);
		}
		thead.append(tr);
		table.append(thead);
		let tbody = document.createElement("tbody");
		for (const lightness of lightnesses) {
			let row = document.createElement("tr");
			let td = document.createElement("td");
			td.textContent = lightness;
			row.append(td);
			for (const hue of hues) {
				let cell = document.createElement("td");
				let color = hue + (lightness ? ("-" + lightness) : "");
				cell.style.backgroundColor = "var(--" + color + ")";
				if (lightness.startsWith("dark")) cell.style.color = "white";
				cell.textContent = color;
				row.append(cell);
			}
			tbody.append(row);
		}
		table.append(tbody);
	}
	document.addEventListener("DOMContentLoaded", function(event) {
		hljs.highlightAll();
		generate_qr_code("qrcode");
		generate_table_color();
	});
</script>
</html>
